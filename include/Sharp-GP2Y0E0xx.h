// 
// Sharp Distance Sensors GP2Y0E02A, GP2Y0E02B, GP2Y0E03
// WARNING: this was 70+% auto-generated by chatgpt based on the datasheet
//
#pragma once

#include <cstdint>
#include <Wire.h>
namespace GP2Y0E0xx {

constexpr uint8_t defaultSensorAddress = 0x80;
constexpr uint8_t readBit = 0x01; // to read, use (defauleSensorAddress | readBit)

enum class Register : uint8_t {
    HoldBit                      = 0x03, // 0x00=Hold, 0x01=Device enable normally
    MaxEmittingPulseWidth        = 0x13, // 0x07=320us, 0x06=240us, 0x05=160us, 0x04=80us, 0x03=40us
    SpotSymmetryThreshold        = 0x1C, // -
    SignalIntensityThreshold     = 0x2F, // Default is set in each sensor by E-Fuse
    MaxSpotSizeThreshold         = 0x33, // -
    MinSpotSizeThreshold         = 0x34, // Default is set in each sensor by E-Fuse
    ShiftBit                     = 0x35, // 0x01=Maximum Display 128cm, 0x02=Maximum Display 64cm
    MedianFilter                 = 0x3F, // 0x00=Data number of median calculation 7, 0x10=5, 0x20=9, 0x30=1
    SRAMAccess                   = 0x4C, // 0x10=Access SRAM
    DistanceHigh                 = 0x5E, // =Distance[11:4]*16+Distance[3:0]/16^2^n, n:Shift Bit (Register 0x35)
    DistanceLow                  = 0x5F, // =Distance[11:4]*16+Distance[3:0]/16^2^n, n:Shift Bit (Register 0x35)
    AEHigh                       = 0x64, // AE=AE[15:8]*256+AE[7:0]
    AELow                        = 0x65, // Before read out, it needs to write Address(0xEC)=Data(0xFF)
    AG                           = 0x67, // Before read out, it needs to write Address(0xEC)=Data(0xFF)
    CoverCompensationLow         = 0x8D, // Cover compensation coefficient = Cover Comp.[10:6]*64 + Cover Comp.[5:0]
    CoverCompensationHigh        = 0x8E, // Cover Comp.[10:6]*64 + Cover Comp.[5:0], Comp.[5:0] is assigned in Reg 0x8D
    CoverCompensationEnable      = 0x8F, // 0x02=Enable, 0x03=Disable
    ReadoutImageSensorData       = 0x90, // 0x00=Disable, 0x10=Low Level (L), 0x11=Middle Level (M), 0x12=High Level (H)
    SignalAccumulationNumber     = 0xA8, // 0x00=1 time accumulation, 0x01=5 times, 0x02=30 times, 0x03=10 times
    EnableBitSignalIntensity     = 0xBC, // 0x00=enable (Default), 0x01=disable
    EnableBitMinSpotSize         = 0xBD, // 0x00=enable (Default), 0x01=disable
    EnableBitMaxSpotSize         = 0xBE, // 0x00=enable, 0x01=disable (Default)
    EnableBitSpotSymmetry        = 0xBF, // 0x00=enable (Default), 0x01=disable
    EFuseTargetAddress           = 0xC8, // Specify E-Fuse address in the target bank
    EFuseReadOut                 = 0xC8, // 1=load E-Fuse data to Register (Bank3)
    EFuseEnableBit               = 0xC8, // 0=Enable, 1=Disable
    EFuseBitNumber               = 0xC9, // Assign bit number in the register 0xC9[7:4]
    EFuseBankAssign              = 0xC9, // Assign bank select in the register 0xC9[3:0]
    EFuseProgramEnableBit        = 0xCA, // 0x00=Disable, 0x01=Enable
    EFuseProgramData             = 0xCD, // -
    ActiveStandbyStateControl    = 0xE8, // 0x00=Active state, 0x01=Stand-by state
    ClockSelect                  = 0xEC, // 0x7F=auto clock, 0xFF=manual clock
    SoftwareReset                = 0xEE, // 0x06=software reset
    BankSelect                   = 0xEF, // 0x00=Bank0, 0x03=Bank3 (E-Fuse)
    RightEdgeCoordinate          = 0xF8, // Spot Size = C-A
    LeftEdgeCoordinate           = 0xF9, // Spot Symmetry = (C+A-2*B) * B
    PeakCoordinate               = 0xFA  // = ((0xF8[7:0]+0xF9[7:0]-2)*0xFA[7:0])
};

namespace Options {
    enum class HoldBit : uint8_t {
        Hold   = 0x00, // Hold
        Enable = 0x01  // Device enable normally
    };

    enum class MaxEmittingPulseWidth : uint8_t {
        us320 = 0x07, // 320us
        us240 = 0x06, // 240us
        us160 = 0x05, // 160us
         us80 = 0x04, // 80us
         us40 = 0x03  // 40us
    };

    enum class Shift : uint8_t {
        max128cm = 0x01, // Maximum  128cm
        max64cm  = 0x02  // Maximum  64cm
    };

    enum class MedianFilter : uint8_t {
        x1 = 0x30  // number of median calculation 1
        x5 = 0x10, // number of median calculation 5
        x7 = 0x00, // number of median calculation 7
        x9 = 0x20, // number of median calculation 9
    };

    enum class CoverCompensation : uint8_t {
        Enable  = 0x02,
        Disable = 0x03
    };

    enum class ReadoutImageSensorData : uint8_t { // Intensity = H * 65536 + M * 256 + L
        Disable = 0x00, // Disable
        Low     = 0x10, // Low Level (L)
        Middle  = 0x11, // Middle Level (M)
        High    = 0x12  // High Level (H)
    };

    enum class SignalAccumulation : uint8_t {
         x1 = 0x00, //  1x accumulation
         x5 = 0x01, //  5x accumulation
        x30 = 0x02, // 30x accumulation
        x10 = 0x03  // 10x accumulation
    };

    enum class ActiveStandby : uint8_t {
        Active  = 0x00, // Active state
        Standby = 0x01  // Stand-by state
    };

    enum class ClockSelect : uint8_t {
        Auto   = 0x7F, // Auto clock
        Manual = 0xFF  // Manual clock
    };

    enum class SoftwareReset : uint8_t {
        Reset = 0x06
    };

    enum class BankSelect : uint8_t {
        Bank0 = 0x00, // Bank 0
        Bank3 = 0x03  // Bank 3 (E-Fuse)
    };
}; // namespace Options

class Sensor {
    uint8_t deviceWriteAddress;
    uint8_t deviceReadAddress;

public:
    void begin(const uint8_t address = defaultSensorAddress);

    uint16_t getDistance();

    template <typename Tr>
    void pingRegister(Tr regAddress);
   
    template <typename Tr>
    void writeRegister(Tr regAddress);

    template <typename Tr, typename Td>
    void writeRegister(Tr regAddress, Td data);

    template <typename Td, typename Tr = Register>
    Td readRegister(Tr regAddress);

    void burstRead(Register startReg, uint8_t* buffer, size_t length);

    Options::HoldBit setHold(Options::HoldBit option);
    Options::HoldBit getHold();
    Options::MaxEmittingPulseWidth setMaxEmittingPulseWidth(Options::MaxEmittingPulseWidth option);
    Options::MaxEmittingPulseWidth getMaxEmittingPulseWidth();
    Options::Shift setShift(Options::Shift option);
    Options::Shift getShift();
    Options::MedianFilter setMedianFilter(Options::MedianFilter option);
    Options::MedianFilter getMedianFilter();
    Options::CoverCompensation setCoverCompensationEnable(Options::CoverCompensation option);
    Options::CoverCompensation getCoverCompensationEnable();
    Options::ReadoutImageSensorData setReadoutImageSensorData(Options::ReadoutImageSensorData option);
    Options::ReadoutImageSensorData getReadoutImageSensorData();
    Options::SignalAccumulation setSignalAccumulation(Options::SignalAccumulation option);
    Options::SignalAccumulation getSignalAccumulation();
    Options::ActiveStandby setActiveStandby(Options::ActiveStandby option);
    Options::ActiveStandby getActiveStandby();
    Options::ClockSelect setClockSelect(Options::ClockSelect option);
    Options::ClockSelect getClockSelect();
    Options::SoftwareReset setSoftwareReset(Options::SoftwareReset option);
    Options::SoftwareReset getSoftwareReset();
    Options::BankSelect setBankSelect(Options::BankSelect option);
    Options::BankSelect getBankSelect();

    Sensor& withHold(Options::HoldBit option);
    Sensor& withMaxEmittingPulseWidth(Options::MaxEmittingPulseWidth option);
    Sensor& withShift(Options::Shift option);
    Sensor& withMedianFilter(Options::MedianFilter option);
    Sensor& withCoverCompensationEnable(Options::CoverCompensation option);
    Sensor& withReadoutImageSensorData(Options::ReadoutImageSensorData option);
    Sensor& withSignalAccumulation(Options::SignalAccumulation option);
    Sensor& withActiveStandby(Options::ActiveStandby option);
    Sensor& withClockSelect(Options::ClockSelect option);
    Sensor& withSoftwareReset(Options::SoftwareReset option);
    Sensor& withBankSelect(Options::BankSelect option);
};

template <typename Tr>
void Sensor::pingRegister(Tr regAddress) {
    Serial.printf("pingRegister: %02x\n", static_cast<uint8_t>(regAddress));
    Wire.beginTransmission(deviceWriteAddress);
    Wire.write(static_cast<uint8_t>(regAddress));
    Wire.endTransmission();
     
    Serial.printf("pingRegister: done\n");
}

template <typename Tr>
void Sensor::writeRegister(Tr regAddress) {
    Serial.printf("writeRegister: %02x\n", static_cast<uint8_t>(regAddress));
    Wire.beginTransmission(deviceWriteAddress);
    Wire.write(static_cast<uint8_t>(regAddress));
    Wire.endTransmission();
    Serial.printf("writeRegister: done\n");
}

template <typename Tr, typename Td>
void Sensor::writeRegister(Tr regAddress, Td data) {
    Serial.printf("writeRegister: %02x, %02x\n", static_cast<uint8_t>(regAddress), static_cast<uint8_t>(data));
    Wire.beginTransmission(deviceWriteAddress);
    Wire.write(static_cast<uint8_t>(regAddress));
    Wire.write(static_cast<uint8_t>(data));
    Wire.endTransmission();
    Serial.printf("writeRegister: done\n");
}

template <typename Td, typename Tr>
Td Sensor::readRegister(Tr regAddress) {

    Serial.printf("readRegister: %02x\n", static_cast<uint8_t>(regAddress));


    Wire.beginTransmission(deviceWriteAddress);
    Wire.write(static_cast<uint8_t>(regAddress));
    Wire.endTransmission();

    Serial.printf("readRegister: endTransmission done\n");

    Wire.requestFrom(deviceReadAddress, 1u);
    Serial.printf("readRegister: requestFrom done\n");

    while (Wire.available() == 0) delayMicroseconds(100);

    Serial.printf("readRegister: available done\n");

    uint8_t read = Wire.read();
    Serial.printf("readRegister: read %02x \n", read);

    return static_cast<Td>(read);
}

}; // namespace GP2Y0E0xx
