// 
// Sharp Distance Sensors GP2Y0E02A, GP2Y0E02B, GP2Y0E03
// WARNING: this was 70+% auto-generated by chatgpt based on the datasheet
//
#include <Arduino.h>
#include "Sharp-GP2Y0E0xx.h"
#include "I2CScanner.h"

namespace GP2Y0E0xx {


void Sensor::begin(const uint8_t address) {
    deviceWriteAddress = address;
    deviceReadAddress = address | readBit;

    Wire.begin();
    I2CScanner scanner;
	scanner.Init();
	scanner.Scan();

    // Wire.beginTransmission(this->address);
    // Wire.write(byte(GP2Y0E03_SHIFT_ADDR));
    // Wire.endTransmission();

    // Wire.requestFrom(this->address, byte(1));
    // if (1 <= Wire.available()) {
    //   this->shift = Wire.read();
    //   return true;
    // }
}

uint16_t Sensor::getDistance() {
    Serial.println("getDistance");
    uint16_t raw = 0;
    uint8_t shift = static_cast<uint8_t>(getShift());

    pingRegister(Register::DistanceHigh);
    // burstRead(Register::DistanceHigh, reinterpret_cast<uint8_t *>(&raw), 2u);
    uint8_t high = readRegister<uint8_t>(Register::DistanceHigh);
    Serial.println("getDistance post 1");
    uint8_t low = readRegister<uint8_t>(Register::DistanceLow) & 0x0F;
    Serial.println("getDistance post 2");
    raw = ((high << 4) | low);

    uint16_t distance = raw >> shift;
    Serial.printf("getDistance result: %d\n", distance);

    return distance;
}

void Sensor::burstRead(Register startReg, uint8_t* buffer, size_t length) {
    Serial.printf("burstRead to reg %02x\n", static_cast<uint8_t>(startReg));
    Wire.beginTransmission(deviceWriteAddress);
    Wire.write(static_cast<uint8_t>(startReg));
    Wire.endTransmission();
    Serial.printf("burstRead: write done to reg %02x\n", static_cast<uint8_t>(startReg));

    Wire.requestFrom(deviceReadAddress, length);
    for (size_t i = 0; i < length; i++) {
        while (Wire.available() == 0) delayMicroseconds(100);
        buffer[i] = Wire.read();
    }
    Serial.printf("burstRead: %02x%02d\n", buffer[0], buffer[1]);
}

Options::HoldBit Sensor::setHold(Options::HoldBit option) {
    writeRegister(Register::HoldBit, option);
    return option;
}

Options::HoldBit Sensor::getHold() {
    return readRegister<Options::HoldBit>(Register::HoldBit);
}

Options::MaxEmittingPulseWidth Sensor::setMaxEmittingPulseWidth(Options::MaxEmittingPulseWidth option) {
    writeRegister(Register::MaxEmittingPulseWidth, option);
    return option;
}

Options::MaxEmittingPulseWidth Sensor::getMaxEmittingPulseWidth() {
    return readRegister<Options::MaxEmittingPulseWidth>(Register::MaxEmittingPulseWidth);
}

Options::Shift Sensor::setShift(Options::Shift option) {
    writeRegister(Register::ShiftBit, option);
    return option;
}

Options::Shift Sensor::getShift() {
    pingRegister(Register::ShiftBit);
    return readRegister<Options::Shift>(Register::ShiftBit);
}

Options::MedianFilter Sensor::setMedianFilter(Options::MedianFilter option) {
    writeRegister(Register::MedianFilter, option);
    return option;
}

Options::MedianFilter Sensor::getMedianFilter() {
        return readRegister<Options::MedianFilter>(Register::MedianFilter);
}

Options::CoverCompensation Sensor::setCoverCompensationEnable(Options::CoverCompensation option) {
    writeRegister(Register::CoverCompensationEnable, option);
    return option;
}

Options::CoverCompensation Sensor::getCoverCompensationEnable() {
    return readRegister<Options::CoverCompensation>(Register::CoverCompensationEnable);
}

Options::ReadoutImageSensorData Sensor::setReadoutImageSensorData(Options::ReadoutImageSensorData option) {
    writeRegister(Register::ReadoutImageSensorData, option);
    return option;
}

Options::ReadoutImageSensorData Sensor::getReadoutImageSensorData() {
    return readRegister<Options::ReadoutImageSensorData>(Register::ReadoutImageSensorData);
}

Options::SignalAccumulation Sensor::setSignalAccumulation(Options::SignalAccumulation option) {
    writeRegister(Register::SignalAccumulationNumber, option);
    return option;
}

Options::SignalAccumulation Sensor::getSignalAccumulation() {
    return readRegister<Options::SignalAccumulation>(Register::SignalAccumulationNumber);
}

Options::ActiveStandby Sensor::setActiveStandby(Options::ActiveStandby option) {
    writeRegister(Register::ActiveStandbyStateControl, option);
    return option;
}

Options::ActiveStandby Sensor::getActiveStandby() {
    return readRegister<Options::ActiveStandby>(Register::ActiveStandbyStateControl);
}

Options::ClockSelect Sensor::setClockSelect(Options::ClockSelect option) {
    writeRegister(Register::ClockSelect, option);
    return option;
}

Options::ClockSelect Sensor::getClockSelect() {
    return readRegister<Options::ClockSelect>(Register::ClockSelect);
}

Options::SoftwareReset Sensor::setSoftwareReset(Options::SoftwareReset option) {
    writeRegister(Register::SoftwareReset, option);
    return option;
}

Options::SoftwareReset Sensor::getSoftwareReset() {
    return readRegister<Options::SoftwareReset>(Register::SoftwareReset);
}

Options::BankSelect Sensor::setBankSelect(Options::BankSelect option) {
    writeRegister(Register::BankSelect, option);
    return option;
}

Options::BankSelect Sensor::getBankSelect() {
    return readRegister<Options::BankSelect>(Register::BankSelect);
}

// Add new chainable implementations
Sensor& Sensor::withHold(Options::HoldBit option) {
    writeRegister(Register::HoldBit, option);
    return *this;
}

Sensor& Sensor::withMaxEmittingPulseWidth(Options::MaxEmittingPulseWidth option) {
    writeRegister(Register::MaxEmittingPulseWidth, option);
    return *this;
}

Sensor& Sensor::withShift(Options::Shift option) {
    writeRegister(Register::ShiftBit, option);
    return *this;
}

Sensor& Sensor::withMedianFilter(Options::MedianFilter option) {
    writeRegister(Register::MedianFilter, option);
    return *this;
}

Sensor& Sensor::withCoverCompensationEnable(Options::CoverCompensation option) {
    writeRegister(Register::CoverCompensationEnable, option);
    return *this;
}

Sensor& Sensor::withReadoutImageSensorData(Options::ReadoutImageSensorData option) {
    writeRegister(Register::ReadoutImageSensorData, option);
    return *this;
}

Sensor& Sensor::withSignalAccumulation(Options::SignalAccumulation option) {
    writeRegister(Register::SignalAccumulationNumber, option);
    return *this;
}

Sensor& Sensor::withActiveStandby(Options::ActiveStandby option) {
    writeRegister(Register::ActiveStandbyStateControl, option);
    return *this;
}

Sensor& Sensor::withClockSelect(Options::ClockSelect option) {
    writeRegister(Register::ClockSelect, option);
    return *this;
}

Sensor& Sensor::withSoftwareReset(Options::SoftwareReset option) {
    writeRegister(Register::SoftwareReset, option);
    return *this;
}

Sensor& Sensor::withBankSelect(Options::BankSelect option) {
    writeRegister(Register::BankSelect, option);
    return *this;
}

}; // namespace GP2Y0E0xx 
